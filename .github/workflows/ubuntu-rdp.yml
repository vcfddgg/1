name: GNOME + Tailscale + VNC & xRDP (No Secrets)

on:
  workflow_dispatch:
    inputs:
      ts_authkey:
        description: "Tailscale Auth key (paste here; not using GitHub Secrets)"
        required: true
      username:
        description: "Linux username for desktop login"
        required: false
        default: "runner"
      password:
        description: "Password for the user, VNC & xRDP"
        required: false
        default: "runner"
      enable_vnc:
        description: "Enable TigerVNC server"
        type: boolean
        default: true
      enable_xrdp:
        description: "Enable xRDP server"
        type: boolean
        default: true
      vnc_display:
        description: "VNC display number (e.g., 1 -> port 5901)"
        required: false
        default: "1"
      vnc_geometry:
        description: "VNC screen size (e.g., 1366x768 or 1280x720)"
        required: false
        default: "1366x768"
      runtime_minutes:
        description: "Workflow runtime in minutes (max 355)"
        required: false
        default: "355"

permissions:
  contents: read

jobs:
  gui-runner:
    runs-on: ubuntu-latest

    env:
      USERNAME: ${{ inputs.username }}
      PASSWORD: ${{ inputs.password }}
      TS_AUTHKEY: ${{ inputs.ts_authkey }}
      VNC_DISPLAY: ${{ inputs.vnc_display }}
      VNC_GEOMETRY: ${{ inputs.vnc_geometry }}
      ENABLE_VNC: ${{ inputs.enable_vnc }}
      ENABLE_XRDP: ${{ inputs.enable_xrdp }}
      RUNTIME_MINUTES: ${{ inputs.runtime_minutes }}
      HOSTNAME: gh-gnome-${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize/validate inputs
        id: cfg
        shell: bash
        run: |
          runtime="${RUNTIME_MINUTES:-355}"
          if ! [[ "$runtime" =~ ^[0-9]+$ ]]; then runtime=355; fi
          if [ "$runtime" -gt 355 ]; then runtime=355; fi
          echo "runtime=$runtime" >> "$GITHUB_OUTPUT"
          nvnc="${ENABLE_VNC}"; [ "$nvnc" = "true" ] || [ "$nvnc" = "True" ] || [ "$nvnc" = "1" ] || nvnc="false"
          nxrdp="${ENABLE_XRDP}"; [ "$nxrdp" = "true" ] || [ "$nxrdp" = "True" ] || [ "$nxrdp" = "1" ] || nxrdp="false"
          echo "enable_vnc=$nvnc" >> "$GITHUB_OUTPUT"
          echo "enable_xrdp=$nxrdp" >> "$GITHUB_OUTPUT"
          disp="${VNC_DISPLAY:-1}"
          if ! [[ "$disp" =~ ^[0-9]+$ ]]; then disp=1; fi
          [ "$disp" -lt 1 ] && disp=1
          [ "$disp" -gt 9 ] && disp=9
          echo "vnc_display=$disp" >> "$GITHUB_OUTPUT"
          geom="${VNC_GEOMETRY:-1366x768}"
          if ! [[ "$geom" =~ ^[0-9]+x[0-9]+$ ]]; then geom="1366x768"; fi
          echo "vnc_geometry=$geom" >> "$GITHUB_OUTPUT"

      - name: Prepare user and basic packages
        shell: bash
        run: |
          set -euxo pipefail
          echo "${USERNAME}:${PASSWORD}" | sudo chpasswd
          echo "${USERNAME} ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/${USERNAME} >/dev/null
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
              xorg dbus-x11 gnome-session gnome-terminal gsettings-desktop-schemas \
              policykit-1 x11-xserver-utils fonts-dejavu-core
          sudo apt-get install -y curl jq net-tools psmisc lsof

      - name: Install & configure xRDP (GNOME)
        if: ${{ steps.cfg.outputs.enable_xrdp == 'true' }}
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get install -y xrdp xorgxrdp
          sudo adduser ${USERNAME} ssl-cert || true
          su - "${USERNAME}" -c 'echo "gnome-session --session=ubuntu" > ~/.xsession'
          sudo sed -i 's/^test -r/#&/' /etc/xrdp/startwm.sh
          sudo bash -lc 'cat >> /etc/xrdp/startwm.sh <<EOF
unset DBUS_SESSION_BUS_ADDRESS
unset XDG_RUNTIME_DIR
gnome-session --session=ubuntu &
wait
EOF'
          sudo systemctl enable xrdp || true
          sudo systemctl restart xrdp || true

      - name: Install & configure TigerVNC (GNOME)
        if: ${{ steps.cfg.outputs.enable_vnc == 'true' }}
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get install -y tigervnc-standalone-server
          su - "${USERNAME}" -c 'mkdir -p ~/.vnc'
          su - "${USERNAME}" -c "printf '%s\n%s\n\n' '${PASSWORD}' '${PASSWORD}' | vncpasswd"
          su - "${USERNAME}" -c "chmod 600 ~/.vnc/passwd"
          su - "${USERNAME}" -c 'cat > ~/.vnc/xstartup <<EOF
#!/bin/sh
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
exec gnome-session --session=ubuntu &
EOF
chmod +x ~/.vnc/xstartup'
          su - "${USERNAME}" -c "vncserver -kill :${{ steps.cfg.outputs.vnc_display }} || true"
          su - "${USERNAME}" -c "vncserver :${{ steps.cfg.outputs.vnc_display }} -geometry ${{ steps.cfg.outputs.vnc_geometry }} -localhost no"

      - name: Install & bring up Tailscale
        shell: bash
        run: |
          set -euxo pipefail
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo nohup /usr/sbin/tailscaled --state=mem: --socket=/run/tailscaled.sock >/tmp/tailscaled.log 2>&1 &
          sudo -E tailscale up --reset --authkey="${TS_AUTHKEY}" --hostname="${HOSTNAME}" --ssh
          tailscale ip || true

      - name: Show connection info
        shell: bash
        run: |
          ts_ip4="$(tailscale ip -4 | head -n1 || true)"
          ts_ip6="$(tailscale ip -6 | head -n1 || true)"
          vnc_port=$((5900 + ${{ steps.cfg.outputs.vnc_display }}))
          echo "Tailscale IPv4: ${ts_ip4}"
          echo "Tailscale IPv6: ${ts_ip6}"
          if [ "${{ steps.cfg.outputs.enable_xrdp }}" = "true" ]; then
            echo "xRDP: ${ts_ip4}:3389 (user=${USERNAME})"
          fi
          if [ "${{ steps.cfg.outputs.enable_vnc }}" = "true" ]; then
            echo "VNC: ${ts_ip4}:${vnc_port} (password=${PASSWORD})"
          fi

      - name: Keep alive for runtime
        shell: bash
        run: |
          mins=${{ steps.cfg.outputs.runtime }}
          for i in $(seq 1 $mins); do
            echo "minute $i / $mins - $(date -u +%F_%T)"
            sleep 60
          done

      - name: Cleanup (stop VNC)
        if: ${{ always() && steps.cfg.outputs.enable_vnc == 'true' }}
        shell: bash
        run: |
          su - "${USERNAME}" -c "vncserver -kill :${{ steps.cfg.outputs.vnc_display }} || true"
